{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCnFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;ACNgE;AAChE;AACA,iBAAiB,sEAAiB","sources":["webpack://dropbox/./src/controllers/DropBoxController.js","webpack://dropbox/webpack/bootstrap","webpack://dropbox/webpack/runtime/define property getters","webpack://dropbox/webpack/runtime/hasOwnProperty shorthand","webpack://dropbox/webpack/runtime/make namespace object","webpack://dropbox/./src/index.js"],"sourcesContent":["export default class DropBoxController {\r\n  constructor() {\r\n    this.btnSendFile = document.querySelector(\"#btn-send-file\");\r\n    this.inputFilesEl = document.querySelector(\"#files\");\r\n    this.snackModalEl = document.querySelector(\"#react-snackbar-root\");\r\n    this.progressBarEl = this.snackModalEl.querySelector(\".mc-progress-bar-fg\");\r\n    this.namefileEl = this.snackModalEl.querySelector(\".filename\");\r\n    this.timeLeftEl = this.snackModalEl.querySelector(\".timeleft\");\r\n\r\n    this.initEvents();\r\n  }\r\n\r\n  initEvents() {\r\n    this.btnSendFile.addEventListener(\"click\", (e) => {\r\n      this.inputFilesEl.click();\r\n    });\r\n\r\n    this.inputFilesEl.addEventListener(\"change\", (e) => {\r\n      this.uploadTask(e.target.files);\r\n\r\n      this.snackModalEl.style.display = \"block\";\r\n    });\r\n  }\r\n\r\n  uploadTask(files) {\r\n    let promises = [];\r\n    [...files].forEach((file) => {\r\n      promises.push(\r\n        new Promise((resolve, reject) => {\r\n          let xhr = new XMLHttpRequest();\r\n\r\n          xhr.open(\"POST\", \"/upload\");\r\n\r\n          xhr.onload = (event) => {\r\n            try {\r\n              resolve(JSON.parse(xhr.responseText));\r\n            } catch (error) {\r\n              reject(error);\r\n            }\r\n          };\r\n\r\n          xhr.onerror = (event) => {\r\n            reject(event);\r\n          };\r\n\r\n          xhr.upload.onprogress = (event) => {\r\n            this.uploadProgress(event, file);\r\n          };\r\n\r\n          let formData = new FormData();\r\n          formData.append(\"input-file\", file);\r\n\r\n          this.startUploadTime = Date.now();\r\n\r\n          xhr.send(formData);\r\n        })\r\n      );\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  }\r\n\r\n  uploadProgress(event, file) {\r\n    let timespent = Data.now() - this.startUploadTime;\r\n\r\n    let loaded = event.loaded;\r\n    let total = event.total;\r\n\r\n    let porcent = parseInt((loaded / total) * 100);\r\n\r\n    this.progressBarEl.style.width = `${porcent}%`;\r\n\r\n    this.namefileEl.innerHTML = file.name;\r\n    this.timeLeftEl.innerHTML = ((100 - porcent) * timespent) / porcent;\r\n\r\n    console.log(timespent, timeLeftEl, porcent);\r\n  }\r\n\r\n  formatTimeToHuman(duration) {\r\n    let seconds = parseInt((duration / 1000) % 60);\r\n    let minutes = parseInt((duration / (1000 * 60)) % 60);\r\n    let hours = parseInt((duration / (1000 * 60 * 60)) % 24);\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import DropBoxController from \"./controllers/DropBoxController\";\r\n\r\nwindow.app = new DropBoxController();\r\n"],"names":[],"sourceRoot":""}